/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package libreria.municipal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author kealm
 */
public class Home extends javax.swing.JFrame {
    private DefaultTableModel mt;
    private DefaultTableModel modeloSolicitudes;
    private Usuario usuarioLogueado;
    private Connection connection;
    /**
     * Creates new form Home
     */
    public Home(Usuario usuarioLogueado) {
        this.usuarioLogueado = usuarioLogueado;
        initComponents();
        connection = new CConexion().conectar();
        mostrarLibrosSolicitados();
        llenarCategorias();
        llenarTabla(obtenerLibros());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtTitulo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        JbBuscar = new javax.swing.JButton();
        JcbCategoria = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        JbSolicitar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        JtaMostrarSolicitudes = new javax.swing.JTable();
        JbDevolver = new javax.swing.JButton();
        JbVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(239, 41, 51));

        txtTitulo.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        txtTitulo.setForeground(new java.awt.Color(255, 255, 255));
        txtTitulo.setText("LIBRERIA MUNICIPAL");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(txtTitulo)
                .addContainerGap(222, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(txtTitulo)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        JbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/libreria/municipal/btn_buscar.png"))); // NOI18N
        JbBuscar.setBorderPainted(false);
        JbBuscar.setContentAreaFilled(false);
        JbBuscar.setMaximumSize(new java.awt.Dimension(108, 50));
        JbBuscar.setMinimumSize(new java.awt.Dimension(108, 50));
        JbBuscar.setPreferredSize(new java.awt.Dimension(108, 50));
        JbBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbBuscarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JbBuscarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JbBuscarMouseExited(evt);
            }
        });

        JcbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Título", "Estado", "Categoría", "Autor", "Año de Lanzamiento"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        JbSolicitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/libreria/municipal/btn_solicitar.png"))); // NOI18N
        JbSolicitar.setBorderPainted(false);
        JbSolicitar.setContentAreaFilled(false);
        JbSolicitar.setMaximumSize(new java.awt.Dimension(108, 50));
        JbSolicitar.setMinimumSize(new java.awt.Dimension(108, 50));
        JbSolicitar.setPreferredSize(new java.awt.Dimension(108, 50));
        JbSolicitar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbSolicitarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JbSolicitarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JbSolicitarMouseExited(evt);
            }
        });

        JtaMostrarSolicitudes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "código ", "Título", "Fecha Préstamo", "Fecha Devolución", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(JtaMostrarSolicitudes);

        JbDevolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/libreria/municipal/btn_devolver.png"))); // NOI18N
        JbDevolver.setBorderPainted(false);
        JbDevolver.setContentAreaFilled(false);
        JbDevolver.setMaximumSize(new java.awt.Dimension(108, 50));
        JbDevolver.setMinimumSize(new java.awt.Dimension(108, 50));
        JbDevolver.setPreferredSize(new java.awt.Dimension(108, 50));
        JbDevolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbDevolverMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JbDevolverMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JbDevolverMouseExited(evt);
            }
        });

        JbVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/libreria/municipal/btn_volver.png"))); // NOI18N
        JbVolver.setBorderPainted(false);
        JbVolver.setContentAreaFilled(false);
        JbVolver.setMaximumSize(new java.awt.Dimension(108, 50));
        JbVolver.setMinimumSize(new java.awt.Dimension(108, 50));
        JbVolver.setPreferredSize(new java.awt.Dimension(108, 50));
        JbVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JbVolverMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JbVolverMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JbVolverMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(JcbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JbVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JbSolicitar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(88, 88, 88))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(JcbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JbVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(JbSolicitar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JbDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 930, 530));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JbBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbBuscarMouseClicked
        // TODO add your handling code here:
        String categoria = JcbCategoria.getSelectedItem().toString();
        List<Libro> libros;
        if ("Todas".equals(categoria)) {
            libros = obtenerLibros();
        } else {
            libros = buscarPorCategoria(categoria);
        }
        llenarTabla(libros);
    }//GEN-LAST:event_JbBuscarMouseClicked

    private void JbSolicitarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbSolicitarMouseClicked
        // TODO add your handling code here:
        solicitarPrestamo();
    }//GEN-LAST:event_JbSolicitarMouseClicked

    private void JbDevolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbDevolverMouseClicked
        // TODO add your handling code here:
        devolverLibro();
    }//GEN-LAST:event_JbDevolverMouseClicked

    private void JbVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbVolverMouseClicked
        // TODO add your handling code here:
        Login secScreen = new Login();
        secScreen.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_JbVolverMouseClicked

    private void JbVolverMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbVolverMouseEntered
        // TODO add your handling code here:
        ImageIcon estatoDosRe = new ImageIcon("src\\libreria\\municipal\\btn_volver_pressed.png");
        JbVolver.setIcon(estatoDosRe);
    }//GEN-LAST:event_JbVolverMouseEntered

    private void JbVolverMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbVolverMouseExited
        // TODO add your handling code here:
        ImageIcon estatoDosRe = new ImageIcon("src\\libreria\\municipal\\btn_volver.png");
        JbVolver.setIcon(estatoDosRe);
    }//GEN-LAST:event_JbVolverMouseExited

    private void JbBuscarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbBuscarMouseEntered
        // TODO add your handling code here:
        ImageIcon estatoDosRe = new ImageIcon("src\\libreria\\municipal\\btn_buscar_pressed.png");
        JbBuscar.setIcon(estatoDosRe);
    }//GEN-LAST:event_JbBuscarMouseEntered

    private void JbBuscarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbBuscarMouseExited
        // TODO add your handling code here:
        ImageIcon estatoDosRe = new ImageIcon("src\\libreria\\municipal\\btn_buscar.png");
        JbBuscar.setIcon(estatoDosRe);
    }//GEN-LAST:event_JbBuscarMouseExited

    private void JbSolicitarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbSolicitarMouseEntered
        // TODO add your handling code here:
        ImageIcon estatoDosRe = new ImageIcon("src\\libreria\\municipal\\btn_solicitar_pressed.png");
        JbSolicitar.setIcon(estatoDosRe);
    }//GEN-LAST:event_JbSolicitarMouseEntered

    private void JbSolicitarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbSolicitarMouseExited
        // TODO add your handling code here:
        ImageIcon estatoDosRe = new ImageIcon("src\\libreria\\municipal\\btn_solicitar.png");
        JbSolicitar.setIcon(estatoDosRe);
    }//GEN-LAST:event_JbSolicitarMouseExited

    private void JbDevolverMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbDevolverMouseEntered
        // TODO add your handling code here:
        ImageIcon estatoDosRe = new ImageIcon("src\\libreria\\municipal\\btn_devolver_pressed.png");
        JbDevolver.setIcon(estatoDosRe);
    }//GEN-LAST:event_JbDevolverMouseEntered

    private void JbDevolverMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JbDevolverMouseExited
        // TODO add your handling code here:
        ImageIcon estatoDosRe = new ImageIcon("src\\libreria\\municipal\\btn_devolver.png");
        JbDevolver.setIcon(estatoDosRe);
    }//GEN-LAST:event_JbDevolverMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JbBuscar;
    private javax.swing.JButton JbDevolver;
    private javax.swing.JButton JbSolicitar;
    private javax.swing.JButton JbVolver;
    private javax.swing.JComboBox<String> JcbCategoria;
    private javax.swing.JTable JtaMostrarSolicitudes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel txtTitulo;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla(List<Libro> libros) {
        mt = (DefaultTableModel) jTable1.getModel();
        mt.setRowCount(0);

        for (Libro libro : libros) {
            mt.addRow(new Object[]{
                libro.getCodigo(),
                libro.getTitulo(),
                libro.getEstado(),
                libro.getCategoria(),
                libro.getAutor(),
                libro.getAnoLanzamiento()
            });
        }
    }

    private void llenarCategorias() {
        Set<String> categorias = obtenerCategorias();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Todas");
        for (String categoria : categorias) {
            model.addElement(categoria);
        }
        JcbCategoria.setModel(model);
    }
    
    private Set<String> obtenerCategorias() {
        Set<String> categorias = new HashSet<>();
        String query = "SELECT DISTINCT categoria FROM libros";

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                categorias.add(rs.getString("categoria"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return categorias;
    }

    private void solicitarPrestamo() {
        if (usuarioLogueado == null) {
            JOptionPane.showMessageDialog(this, "Debe estar logueado para solicitar un préstamo", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un libro para solicitar un préstamo", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String codigoLibro = (String) jTable1.getValueAt(selectedRow, 0);
        String estadoLibro = (String) jTable1.getValueAt(selectedRow, 2);

        if ("Prestado".equalsIgnoreCase(estadoLibro) || "Pendiente".equalsIgnoreCase(estadoLibro)) {
            JOptionPane.showMessageDialog(this, "El libro seleccionado ya está prestado o en espera de aprobación", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String insertPrestamo = "INSERT INTO prestamos (dni_usuario, codigo_libro, fecha_prestamo, fecha_devolucion, estado) VALUES (?, ?, ?, ?, ?)";
        String updateLibro = "UPDATE libros SET estado = ? WHERE codigo = ?";

        try (PreparedStatement psPrestamo = connection.prepareStatement(insertPrestamo);
             PreparedStatement psLibro = connection.prepareStatement(updateLibro)) {
            
            connection.setAutoCommit(false);
            
            psPrestamo.setString(1, usuarioLogueado.getDni());
            psPrestamo.setString(2, codigoLibro);
            psPrestamo.setDate(3, java.sql.Date.valueOf(LocalDate.now()));
            psPrestamo.setDate(4, java.sql.Date.valueOf(LocalDate.now().plusDays(15))); // Suponiendo un periodo de préstamo de 15 días
            psPrestamo.setString(5, "Pendiente");
            psPrestamo.executeUpdate();

            psLibro.setString(1, "Pendiente");
            psLibro.setString(2, codigoLibro);
            psLibro.executeUpdate();

            connection.commit();
            
            JOptionPane.showMessageDialog(this, "Solicitud de préstamo realizada con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            try {
                connection.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
        } finally {
            try {
                connection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        llenarTabla(obtenerLibros());
        mostrarLibrosSolicitados();
    }

    private void mostrarLibrosSolicitados() {
        modeloSolicitudes = new DefaultTableModel(
            new Object[][] {},
            new String[] { "Código", "Título", "Fecha Préstamo", "Fecha Devolución", "Estado" }
        ) {
            boolean[] canEdit = new boolean[] { false, false, false, false, true };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        JtaMostrarSolicitudes.setModel(modeloSolicitudes);

        List<Prestamo> prestamos = obtenerPrestamos(usuarioLogueado.getDni());
        for (Prestamo prestamo : prestamos) {
            String codigoLibro = prestamo.getCodigoLibro();
            String estadoLibro = prestamo.getEstado();
            String tituloLibro = obtenerTituloLibroPorCodigo(codigoLibro);
            String fechaPrestamo = prestamo.getFechaPrestamo() != null ? prestamo.getFechaPrestamo().toString() : "N/A";
            String fechaDevolucion = prestamo.getFechaDevolucion() != null ? prestamo.getFechaDevolucion().toString() : "N/A";
            modeloSolicitudes.addRow(new Object[] { codigoLibro, tituloLibro, fechaPrestamo, fechaDevolucion, estadoLibro });
        }
    }
    
    private List<Libro> buscarPorCategoria(String categoria) {
        List<Libro> libros = new ArrayList<>();
        String query = "SELECT * FROM libros WHERE categoria = ?";

        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, categoria);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Libro libro = new Libro(
                        rs.getString("codigo"),
                        rs.getString("titulo"),
                        rs.getString("estado"),
                        rs.getString("categoria"),
                        rs.getString("autor"),
                        rs.getInt("ano_lanzamiento")
                    );
                    libros.add(libro);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return libros;
    }
    
    private List<Prestamo> obtenerPrestamos(String dniUsuario) {
        List<Prestamo> prestamos = new ArrayList<>();
        String query = "SELECT * FROM prestamos WHERE dni_usuario = ?";

        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, dniUsuario);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Usuario usuario = Usuario.buscarUsuarioPorDni(rs.getString("dni_usuario"));
                    Prestamo prestamo = new Prestamo(
                        usuario,
                        rs.getString("codigo_libro"),
                        rs.getDate("fecha_prestamo") != null ? rs.getDate("fecha_prestamo").toLocalDate() : null,
                        rs.getDate("fecha_devolucion") != null ? rs.getDate("fecha_devolucion").toLocalDate() : null,
                        rs.getString("estado")
                    );
                    prestamos.add(prestamo);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return prestamos;
    }

    private String obtenerTituloLibroPorCodigo(String codigoLibro) {
        for (Libro libro : obtenerLibros()) {
            if (libro.getCodigo().equals(codigoLibro)) {
                return libro.getTitulo();
            }
        }
        return "Título no encontrado";
    }
    
    private List<Libro> obtenerLibros() {
        List<Libro> libros = new ArrayList<>();
        String query = "SELECT * FROM libros";

        try (PreparedStatement ps = connection.prepareStatement(query);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Libro libro = new Libro(
                    rs.getString("codigo"),
                    rs.getString("titulo"),
                    rs.getString("estado"),
                    rs.getString("categoria"),
                    rs.getString("autor"),
                    rs.getInt("ano_lanzamiento")
                );
                libros.add(libro);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return libros;
    }

    private void devolverLibro() {
        if (usuarioLogueado == null) {
            JOptionPane.showMessageDialog(this, "Debe estar logueado para devolver un libro", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int selectedRow = JtaMostrarSolicitudes.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un libro para devolver", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String codigoLibro = (String) JtaMostrarSolicitudes.getValueAt(selectedRow, 0);
        String estadoPrestamo = (String) JtaMostrarSolicitudes.getValueAt(selectedRow, 4);

        if (!"Prestado".equalsIgnoreCase(estadoPrestamo)) {
            JOptionPane.showMessageDialog(this, "El libro seleccionado no está en estado 'Prestado'", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String deletePrestamo = "DELETE FROM prestamos WHERE dni_usuario = ? AND codigo_libro = ?";
        String updateLibro = "UPDATE libros SET estado = ? WHERE codigo = ?";

        try (PreparedStatement psPrestamo = connection.prepareStatement(deletePrestamo);
             PreparedStatement psLibro = connection.prepareStatement(updateLibro)) {
            
            connection.setAutoCommit(false);
            
            psPrestamo.setString(1, usuarioLogueado.getDni());
            psPrestamo.setString(2, codigoLibro);
            psPrestamo.executeUpdate();

            psLibro.setString(1, "Disponible");
            psLibro.setString(2, codigoLibro);
            psLibro.executeUpdate();

            connection.commit();

            JOptionPane.showMessageDialog(this, "Libro devuelto con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            try {
                connection.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
        } finally {
            try {
                connection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        llenarTabla(obtenerLibros());
        mostrarLibrosSolicitados();
    }    
}
